#!/usr/bin/env python
# -*- coding: utf-8 -*-

from  pathlib import Path
import sys
import re
import itertools
import time

sys.path.append(str(Path(__file__).absolute().parents[1]))
from lib.rmq import RmQDataStructure as RmQDS
from lib import config as cfg

def main():
    VERBOSE = False
    if len(sys.argv) > 1 and sys.argv[1] == "-v":
        VERBOSE = True

#    print("Input filename (if you want to use default file, press ENTER): ", end="")
#    filename = input().strip()
#    if re.match(r'^\s*$', filename):
#        filename = cfg.INPUT_FILE  # default input file
    filename = './test.csv' 

    with open(filename, 'r') as f:
        str_list = f.read().split(',')
    A = [int(val) for val in str_list]
    if VERBOSE:
        print("Input filename is " + str(filename));
        print(f'Input array is A[0..{len(A) - 1}]');
        print("Preprocessing...");
    ds = RmQDS(A)
    if VERBOSE:
        print("Complete!");

    N = len(A)
    for i, j in itertools.product(range(N), range(N)):
        if i > j:
            continue
#    while True:
#        print("\nInput query positions (input 'q' for quite)");
#        print("start position: ", end="")
#        i = input()
#        if i == 'q':
#            sys.exit(0) 
#        elif not i.isdigit():
#            sys.exit(1)
#        i = int(i)
#        print("end position: ", end="")
#        j = input()
#        if j == 'q':
#            sys.exit(0) 
#        elif not j.isdigit():
#            sys.exit(1)
#        j = int(j)

        start = time.perf_counter()
        ans1 = ds.RmQ(i, j)
        end   = time.perf_counter()
        print(f"elapse = {(end-start)*1000}")

        start = time.perf_counter()
        ans2 = naiveRmQ(A, i, j)
        end   = time.perf_counter()
        print(f"elapse = {(end-start)*1000}")

        if A[ans1] != A[ans2]: 
            print("BUG!!!!!!!");
            sys.exit(1)

        if VERBOSE:
            print("\nA = " + str(ds.A))
            print(f"\nRmQ({i}, {j}) = " + str(ans))
            print(f"\nA[{i}..{j}] = " + str(ds.A[i:j+1]))
        else:
           print(ans1)

def naiveRmQ (A, i, j):
    minval = cfg.INF
    argmin = -1
    for index in range(i, j+1):
        if A[index] < minval:
            minval = A[index]
            argmin = index
    return argmin

if __name__ == "__main__":
    main()
